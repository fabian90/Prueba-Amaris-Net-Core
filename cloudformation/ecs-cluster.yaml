AWSTemplateFormatVersion: '2010-09-09'
Description: Recursos EC2 para Fondos App

Parameters:
  VpcId:
    Type: String
    Description: VPC donde se lanzará la instancia EC2
  SubnetId:
    Type: String
    Description: Subnet pública para la instancia EC2
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Nombre del par de llaves para acceso SSH

Resources:
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permitir tráfico HTTP y SSH
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-0c02fb55956c7d316 # Amazon Linux 2 (actualiza según región)
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref SubnetId
          GroupSet:
            - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker
          service docker start
          usermod -a -G docker ec2-user
          $(aws ecr get-login --no-include-email --region us-east-1)
          docker pull ${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/amaris-api:latest
          docker run -d -p 80:80 ${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/amaris-api:latest

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - amaris-ec2-role

Outputs:
  EC2InstanceId:
    Value: !Ref EC2Instance
  EC2PublicIP:
    Value: !GetAtt EC2Instance.PublicIp
