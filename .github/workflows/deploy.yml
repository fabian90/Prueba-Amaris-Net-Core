name: Deploy to AWS Fargate

on:
  push:
    branches:
      - main  # Se ejecuta cuando haces push a la rama principal

jobs:
  build:
    runs-on: ubuntu-latest

    environment: production  # Aquí especificamos el entorno de despliegue

    steps:
      # 1. Limpiar la caché (opcional)
      - name: Clear the cache
        run: |
          rm -rf ~/.cache

      # 2. Obtener el código desde el repositorio
      - name: Checkout code
        uses: actions/checkout@v2

      # 3. Configurar AWS CLI
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Región en la que deseas desplegar

      # 4. Establecer la variable de entorno IMAGE_VERSION
      - name: Set image version in environment
        run: |
          echo "IMAGE_VERSION=latest" >> $GITHUB_ENV

      # 5. Construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -t amaris-api:${{ env.IMAGE_VERSION }} .

      # 6. Loguearse en AWS ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      # 7. Etiquetar la imagen
      - name: Tag Docker image
        run: |
          docker tag amaris-api:${{ env.IMAGE_VERSION }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/amaris-api:${{ env.IMAGE_VERSION }}

      # 8. Subir la imagen a ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/amaris-api:${{ env.IMAGE_VERSION }}

      # 9. Registrar la Task Definition en ECS
      - name: Register ECS task definition
        run: |
          aws ecs register-task-definition \
            --family amaris-api-task \
            --network-mode awsvpc \
            --container-definitions '[{
              "name": "amaris-api",
              "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/amaris-api:${{ env.IMAGE_VERSION }}",
              "memory": 512,
              "cpu": 256,
              "essential": true,
              "portMappings": [{"containerPort": 80, "hostPort": 80, "protocol": "tcp"}]
            }]'

      # 10. Actualizar el servicio ECS para usar la nueva imagen
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster amaris-fondos-cluster \
            --service amaris-api-service \
            --task-definition amaris-api-task \
            --desired-count 1 \
            --force-new-deployment
